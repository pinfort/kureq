+class Request()
	var protocol: \src\protocol@Protocol
	
	*func ctor()
		do me.protocol :: #\src\protocol@Protocol
	end func
	
	+func get(url: []char): []char
		var curl: \previous_research\pinfort\kuurl\src\curl@Curl :: \previous_research\pinfort\kuurl\src\curl@makeCurl()
		var curlopt_url: \previous_research\pinfort\kuurl\src\curl@CurlOption :: %URL
		do curl.easy_setopt_str(curlopt_url $ int, "http://www.yahoo.co.jp")
		
		var response: \previous_research\pinfort\kuurl\src\curl@Response :: #\previous_research\pinfort\kuurl\src\curl@Response
		
		do curl.config_easy_response(&response)
		do curl.config_easy_header(&response)
		
		var resCode: int :: curl.easy_perform()
		
		var curle_ok: \previous_research\pinfort\kuurl\src\curl@CurlCode :: %OK
		if(resCode = (curle_ok $ int))
			var res: []char :: ""
			if(response.header <>& null)
				do res :: res ~ response.header
			end if
			
			if(response.body <>& null)
				do res :: res ~ "\n\n" ~ response.body
			end if
			do curl.easy_cleanup()
			ret res
		end if
		
		do cui@print(resCode.toStr() ~ "\n")
		do cui@print("some error occored...\n")
		do curl.easy_cleanup()
		ret ""
	end func
end class
